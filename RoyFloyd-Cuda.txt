#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <stdio.h>
#include <cstdlib>
#include <ctime>


#define NO_ELEMENTS 4
#define INF 9999

void random_ints(int *array);
void print_array(int *array);

__global__ void roy_floyd(int *array, int k)
{
	if (array[threadIdx.x * NO_ELEMENTS + threadIdx.y] > array[threadIdx.x * NO_ELEMENTS + k] + array[k * NO_ELEMENTS + threadIdx.y])	
	{
		array[threadIdx.x * NO_ELEMENTS + threadIdx.y] = array[threadIdx.x * NO_ELEMENTS + k] + array[k * NO_ELEMENTS + threadIdx.y];
	}
}

int main()
{
	int size = NO_ELEMENTS * NO_ELEMENTS * sizeof(int);
	auto *array = new int[size];
	int *dev_array;

	srand(time(nullptr));
	random_ints(array);

	printf("Initial:\n");
	print_array(array);

	cudaMalloc((void **)&dev_array, size);
	cudaMemcpy(dev_array, array, size, cudaMemcpyHostToDevice);
	auto numOfBlocks = 1;
	dim3 threadsPerBlock(NO_ELEMENTS, NO_ELEMENTS);

	for(auto k = 0; k < NO_ELEMENTS; ++k)
	{
		roy_floyd <<<numOfBlocks, threadsPerBlock>>>(dev_array, k);
	}


	cudaMemcpy(array, dev_array, size, cudaMemcpyDeviceToHost);
	printf("Optimized:\n");
	print_array(array);
}

void random_ints(int *array)
{
	for (auto i = 0; i < NO_ELEMENTS; ++i)
	{
		for (auto j = 0; j < NO_ELEMENTS; ++j)
		{
			if(i != j)
			{
				array[i * NO_ELEMENTS + j] = rand() % 10;
			}
			else
			{
				array[i * NO_ELEMENTS + j] = 0;
			}
		}
	}
}

void print_array(int *array)
{
	for (auto i = 0; i < NO_ELEMENTS; ++i)
	{
		for (auto j = 0; j < NO_ELEMENTS; ++j)
		{
			printf("%d ", array[i * NO_ELEMENTS + j]);
		}

		printf("\n");
	}
}